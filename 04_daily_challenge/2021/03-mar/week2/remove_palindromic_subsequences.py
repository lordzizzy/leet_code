# https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/

# Remove Palindromic Subsequences
# Given a string s consisting only of letters 'a' and 'b'. In a single step you
# can remove one palindromic subsequence from s.

# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string, if it is generated by deleting
# some characters of a given string without changing its order.

# A string is called palindrome if is one that reads the same backward as well
# as forward.

# Example 1:
# Input: s = "ababa"
# Output: 1
# Explanation: String is already palindrome

# Example 2:
# Input: s = "abb"
# Output: 2
# Explanation: "abb" -> "bb" -> "".
# Remove palindromic subsequence "a" then "bb".

# Example 3:
# Input: s = "baabb"
# Output: 2
# Explanation: "baabb" -> "b" -> "".
# Remove palindromic subsequence "baab" then "b".

# Example 4:
# Input: s = ""
# Output: 0

# Constraints:
# 0 <= s.length <= 1000
# s only consists of letters 'a' and 'b'

from typing import Callable
from termcolor import colored


class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if not len(s):
            return 0
        elif s == s[::-1]:
            return 1
        else:
            return 2


SolutionFunc = Callable[[str], int]


def test_solution(s: str, expected: int) -> None:
    def test_impl(func: SolutionFunc, s: str, expected: int) -> None:
        r = func(s)
        if r == expected:
            print(
                colored(
                    f"PASSED {func.__name__} => Min steps to reduce {s} to empty string is {r}",
                    "green",
                )
            )
        else:
            print(
                colored(
                    f"FAILED {func.__name__} => Min steps to reduce {s} to empty string is {r} but expected {expected}",
                    "red",
                )
            )

    sln = Solution()
    test_impl(sln.removePalindromeSub, s, expected)


if __name__ == "__main__":
    test_solution(s="ababa", expected=1)
    test_solution(s="abb", expected=2)
    test_solution(s="baabb", expected=2)
    test_solution(s="", expected=0)